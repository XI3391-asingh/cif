project: galaxyfinx
fullnameOverride: 'customer-service'
environment: 'dev'
namespace: 'dev'
deployment:
  component: api
  containerPort:
    http: 11699
    metrics: 11700
  replicaCount: 1
  initContainers:
  - name: init-liquibase
    image:
      tag: <+artifact.tag>
      repository: "902615725652.dkr.ecr.ap-southeast-1.amazonaws.com/customer-service"
    extraEnvs:
    - name: POSTGRES_USER
      valueFrom:
        secretKeyRef:
          name: dev-customer-service-db-credentials
          key: username
    - name: POSTGRES_PASSWORD
      valueFrom:
        secretKeyRef:
          name: dev-customer-service-db-credentials
          key: password
    - name: POSTGRES_URL
      value: jdbc:postgresql://dev-customer-service-db-1.ca6htujinjyy.ap-southeast-1.rds.amazonaws.com:5432/customerservicedb
    resources:
      limits:
        cpu: 100m
        memory: 600Mi
      requests:
        cpu: 50m
        memory: 300Mi    
    command:
    - "java"
    - "-jar"
    - "/app/app.jar"
    - db
    - migrate
    - config.yml
  image:
    registry: "902615725652.dkr.ecr.ap-southeast-1.amazonaws.com"
    repository: customer-service
    pullPolicy: IfNotPresent
    tag: <+artifact.tag>
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '11700'
    prometheus.io/path: '/metrics'
  extraEnvs:
  - name: POSTGRES_USER
    valueFrom:
      secretKeyRef:
        name: dev-customer-service-db-credentials
        key: username
  - name: POSTGRES_PASSWORD
    valueFrom:
      secretKeyRef:
        name: dev-customer-service-db-credentials
        key: password
  - name: POSTGRES_URL
    value: jdbc:postgresql://dev-customer-service-db-1.ca6htujinjyy.ap-southeast-1.rds.amazonaws.com:5432/customerservicedb

  livenessProbe:
    path: /healthcheck
    port: 11700
    failureThreshold: 10
    initialDelaySeconds: 20
    timeoutSeconds: 10
  readinessProbe:
    path: /healthcheck
    port: 11700
    failureThreshold: 10
    initialDelaySeconds: 18
    timeoutSeconds: 10
  resources:
    limits:
      cpu: 100m
      memory: 600Mi
    requests:
      cpu: 50m
      memory: 300Mi
  volumeMounts:
  - mountPath: /etc/secrets/customer-service-db-secret
    name: customer-service-db-secret
    readOnly: true
  volumes:
  - name: customer-service-db-secret
    csi:
      driver: secrets-store.csi.k8s.io
      readOnly: true
      volumeAttributes:
        secretProviderClass: customer-service
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
service:
  type: ClusterIP
  annotations: {}
  ports:
  - name: http
    port: 11699
    targetPort: 11699

istio:
  enabled: true
  destinationRule:
    enabled: false
  virtualService:
    enabled: true
    timeout: 1m
    destinationport: 11699
    host: '*'
    gateway: ms-ingress
    uriPrefix: 
    - /party/
  # authorization policy to only allow access within the namespace
  authorizationPolicy:
    enabled: false
    allowedNaemspaces: []
    # allowedNaemspaces: [ns1, ns2, ns3]
secretProviderClass:
  enabled: true
  provider: aws
  parameters:
    objects:
      - objectName: dev-customer-service-db-credentials
        objectType: secretsmanager
        jmesPath: 
          - path: "username"
            objectAlias: "SecretUsername"
          - path: "password"
            objectAlias: "SecretPassword"
  secretObjects:              
  - secretName: dev-customer-service-db-credentials
    type: Opaque
    data: 
    - key: username
      objectName: "SecretUsername"
    - key: password
      objectName: "SecretPassword"
serviceAccount:
  annotations: 
     eks.amazonaws.com/role-arn: arn:aws:iam::840087460680:role/customer-service-irsa
  name: 'customer-service'
