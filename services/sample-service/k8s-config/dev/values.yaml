project: test
fullnameOverride: 'sample-service'
environment: 'dev'
namespace: 'sample-service'
deployment:
  component: api
  containerPort:
    http: 11699
    metrics: 11700
  replicaCount: 1
  image:
    registry: "474532148129.dkr.ecr.ap-south-1.amazonaws.com"
    repository: sample-service
    pullPolicy: IfNotPresent
    tag: ${IMAGE_TAG}
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '11700'
    prometheus.io/path: '/metrics'
  extraEnvs:
  - name: POSTGRES_USER
    valueFrom:
      secretKeyRef:
        name: dev-cif-service-db-credentials
        key: username
  - name: POSTGRES_PASSWORD
    valueFrom:
      secretKeyRef:
        name: dev-cif-service-db-credentials
        key: password
  - name: POSTGRES_URL
    value: jdbc:postgresql://postgresql.postgresql.svc.cluster.local:5432/cifservicedb
  - name: BOOTSTRAP_SERVER
    value: my-cluster-kafka-bootstrap.dev.svc.cluster.local:9092
  - name: ELASTIC_HOST
    value: http://elasticsearch.elasticsearch.svc.cluster.local
  - name: ELASTIC_PORT
    value: "9200"
  livenessProbe:
    path: /healthcheck
    port: 11700
    failureThreshold: 10
    initialDelaySeconds: 20
    timeoutSeconds: 10
  readinessProbe:
    path: /healthcheck
    port: 11700
    failureThreshold: 10
    initialDelaySeconds: 18
    timeoutSeconds: 10
  resources:
    limits:
      cpu: 1000m
      memory: 4096Mi
    requests:
      cpu: 400m
      memory: 2048Mi
  volumeMounts:
  - mountPath: /etc/secrets/cif-service-db-secret
    name: cif-service-db-secret
    readOnly: true
  volumes:
  - name: cif-service-db-secret
    secret:
      secretName: dev-cif-service-db-credentials
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
service:
  type: ClusterIP
  annotations: {}
  ports:
  - name: http
    port: 11699
    targetPort: 11699
istio:
  enabled: false
  destinationRule:
    enabled: false
  virtualService:
    enabled: true
    timeout: 1m
    destinationport: 11699
    host: '*'
    gateway: istio-ingressgateway
    uriPrefix:
    - /party/
  # authorization policy to only allow access within the namespace
  authorizationPolicy:
    enabled: false
    allowedNaemspaces: []
    # allowedNaemspaces: [ns1, ns2, ns3]
secretProviderClass:
  enabled: false
  provider: aws
  parameters:
    objects:
      - objectName: arn:aws:secretsmanager:ap-south-1:474532148129:secret:dev-cif-service-db-credentials-hXlCjO
        objectType: secretsmanager
        jmesPath:
          - path: "username"
            objectAlias: "SecretUsername"
          - path: "password"
            objectAlias: "SecretPassword"
  secretObjects:
  - secretName: arn:aws:secretsmanager:ap-south-1:474532148129:secret:dev-cif-service-db-credentials-hXlCjO
    type: Opaque
    data:
    - key: username
      objectName: "SecretUsername"
    - key: password
      objectName: "SecretPassword"
serviceAccount:
  annotations:
     eks.amazonaws.com/role-arn: arn:aws:iam::474532148129:role/TerraformAdmin
  name: 'sample-service'